import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { 
  Settings, 
  Zap, 
  Cable, 
  Shield, 
  Activity, 
  BarChart3,
  ArrowRight,
  CheckCircle
} from "lucide-react";

const CatalogSection = () => {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);

  const catalogItems = [
    {
      id: "mounting",
      title: "Mounting Structure",
      icon: Settings,
      description: "Robust metallic frames designed to fix solar panels securely on rooftops",
      details: {
        materials: "Galvanized iron (GI) or anodized aluminium",
        types: ["Flat roof", "Inclined roof", "Elevated structure"],
        features: ["Corrosion-resistant", "Wind-load tested", "Easy installation", "Weather-resistant design"],
        purpose: "Ensure proper tilt and orientation for optimal energy generation"
      }
    },
    {
      id: "dcdb",
      title: "DC Combiner Box (DCDB)",
      icon: Zap,
      description: "Combines DC output from multiple strings of panels and routes it to the inverter",
      details: {
        includes: ["DC fuses", "Isolators", "Surge protection device (SPD)"],
        purpose: "Enhances system safety and manageability",
        features: ["Overcurrent protection", "Simplified wiring", "Easy maintenance", "Professional grade"],
        specifications: "2 IN 2 OUT configuration available"
      }
    },
    {
      id: "acdb",
      title: "AC Distribution Box (ACDB)",
      icon: Activity,
      description: "Receives AC output from the inverter and distributes it to the building's load or utility grid",
      details: {
        includes: ["MCBs/MCCBs", "Isolator switches", "SPDs"],
        function: "Safe and reliable power distribution",
        features: ["Fault protection", "Surge protection", "Easy isolation", "Grid synchronization"],
        purpose: "Protects the system from faults and surges"
      }
    },
    {
      id: "cables",
      title: "Solar Cables",
      icon: Cable,
      description: "Specialized cables designed to carry solar power efficiently",
      details: {
        types: ["DC (single-core)", "AC (multi-core)"],
        features: ["UV-resistant", "Weatherproof", "Extreme temperature performance", "Low voltage drop"],
        certifications: "IEC/EN standards for solar applications",
        purpose: "Maintain performance in extreme temperatures and weather conditions"
      }
    },
    {
      id: "earthing",
      title: "Earthing & Lightning Arrester",
      icon: Shield,
      description: "Ensures safety of the solar system and connected devices",
      details: {
        includes: ["Copper/GI earthing rods", "Surge protection devices (SPD)", "Lightning Arrestor"],
        purpose: "Prevents equipment damage and electrical hazards",
        features: ["Electrical surge grounding", "Lightning protection", "Equipment safety", "Code compliance"],
        protection: "Guards against lightning strikes and electrical surges"
      }
    },
    {
      id: "generation-meter",
      title: "Generation Meter",
      icon: BarChart3,
      description: "Records the total electricity generated by the solar rooftop system",
      details: {
        function: [
          "Measures total solar power generation (in kWh)",
          "Installed between inverter output and load/ACDB",
          "Enables performance analysis and energy accounting"
        ],
        features: ["Digital display with real-time readings", "Tamper-proof and utility-approved", "Single-phase or three-phase options"],
        application: "Mandatory in grid-connected systems under DISCOM/net metering policies",
        purpose: "Verify system performance and regulatory compliance"
      }
    },
    {
      id: "net-meter",
      title: "Net Meter",
      icon: ArrowRight,
      description: "A bi-directional energy meter that records both energy imported and exported",
      details: {
        usedIn: "Grid-connected rooftop systems",
        benefit: "Enables monetary credit for surplus power generation",
        specifications: {
          type: "SPEMO1",
          voltage: "240V, 50Hz",
          class: "CLASS1"
        },
        note: "Net meter is usually provided by DISCOM after payment of proposed charges",
        purpose: "Calculate net electricity consumption and surplus generation credits"
      }
    }
  ];

  return (
    <section id="catalog" className="py-20 bg-muted/30">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-foreground mb-4">
            Interactive Product Catalog
          </h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Explore our comprehensive range of solar system components and accessories. 
            Click on any product to learn more about its features and specifications.
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {catalogItems.map((item) => {
            const IconComponent = item.icon;
            return (
              <Dialog key={item.id}>
                <DialogTrigger asChild>
                  <Card className="cursor-pointer hover:shadow-solar transition-all duration-300 hover:-translate-y-1 border-none shadow-md group">
                    <CardHeader className="text-center pb-4">
                      <div className="mx-auto mb-4 bg-gradient-primary p-4 rounded-full w-16 h-16 flex items-center justify-center group-hover:shadow-glow transition-shadow">
                        <IconComponent className="h-8 w-8 text-white" />
                      </div>
                      <CardTitle className="text-lg text-foreground group-hover:text-primary transition-colors">
                        {item.title}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <p className="text-muted-foreground text-sm text-center mb-4">
                        {item.description}
                      </p>
                      <div className="text-center">
                        <Badge variant="outline" className="group-hover:border-primary transition-colors">
                          Click to learn more
                        </Badge>
                      </div>
                    </CardContent>
                  </Card>
                </DialogTrigger>

                <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle className="flex items-center text-xl">
                      <IconComponent className="h-6 w-6 text-primary mr-3" />
                      {item.title}
                    </DialogTitle>
                  </DialogHeader>
                  
                  <div className="space-y-6">
                    <p className="text-muted-foreground">{item.description}</p>
                    
                    {/* Purpose */}
                    {item.details.purpose && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2 flex items-center">
                          <CheckCircle className="h-4 w-4 text-secondary mr-2" />
                          Purpose
                        </h4>
                        <p className="text-sm text-muted-foreground pl-6">
                          {item.details.purpose}
                        </p>
                      </div>
                    )}

                    {/* Materials */}
                    {item.details.materials && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">Materials</h4>
                        <p className="text-sm text-muted-foreground">{item.details.materials}</p>
                      </div>
                    )}

                    {/* Types */}
                    {item.details.types && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">Types Available</h4>
                        <ul className="space-y-1">
                          {item.details.types.map((type, index) => (
                            <li key={index} className="text-sm text-muted-foreground flex items-center">
                              <CheckCircle className="h-3 w-3 text-secondary mr-2 flex-shrink-0" />
                              {type}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Includes */}
                    {item.details.includes && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">Includes</h4>
                        <ul className="space-y-1">
                          {item.details.includes.map((include, index) => (
                            <li key={index} className="text-sm text-muted-foreground flex items-center">
                              <CheckCircle className="h-3 w-3 text-secondary mr-2 flex-shrink-0" />
                              {include}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Function */}
                    {item.details.function && Array.isArray(item.details.function) && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">Functions</h4>
                        <ul className="space-y-1">
                          {item.details.function.map((func, index) => (
                            <li key={index} className="text-sm text-muted-foreground flex items-center">
                              <CheckCircle className="h-3 w-3 text-secondary mr-2 flex-shrink-0" />
                              {func}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Features */}
                    {item.details.features && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">Key Features</h4>
                        <ul className="space-y-1">
                          {item.details.features.map((feature, index) => (
                            <li key={index} className="text-sm text-muted-foreground flex items-center">
                              <CheckCircle className="h-3 w-3 text-secondary mr-2 flex-shrink-0" />
                              {feature}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* Specifications */}
                    {item.details.specifications && typeof item.details.specifications === 'object' && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">Specifications</h4>
                        <div className="bg-muted p-3 rounded-lg space-y-1">
                          {Object.entries(item.details.specifications).map(([key, value]) => (
                            <div key={key} className="flex justify-between text-sm">
                              <span className="text-muted-foreground capitalize">{key}:</span>
                              <span className="text-foreground">{value}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Additional Notes */}
                    {item.details.note && (
                      <div className="bg-accent-light p-3 rounded-lg">
                        <p className="text-sm text-muted-foreground">
                          <strong>Note:</strong> {item.details.note}
                        </p>
                      </div>
                    )}
                  </div>
                </DialogContent>
              </Dialog>
            );
          })}
        </div>
      </div>
    </section>
  );
};

export default CatalogSection;